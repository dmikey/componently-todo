(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = function (data) {

    var document = typeof (window) === 'object' ? window.document : {
        createElement: function (type) {
            return {
                setAttribute: function () {}
            }
        }
    };

    // merge a passed object, to this
    this.data = function (data) {
        this.oldnode = this.node;
        for (var k in data) {
            this[k] = data[k];
        };

        this.tag = this.tag || 'div';

        return this;
    };

    // update the components UI
    this.update = function (data) {
        if (data) this.data(data);

        this.render();
        var target = this.target || this.parent;

        if (target) {
            target.replaceChild(this.node, this.oldnode);
        }
    }

    // setup this component
    this.render = function () {
        this.renderDOM();
        this.renderOuterHTML(this.innerHTML);
        return this;
    };

    // render the html of this component
    this.renderHTML = function () {
        if (this.components) {
            this.innerHTML = this.renderComponents();
        };

        var template = this.template || function (data) {
            return data.innerHTML;
        };

        this.innerHTML = template(this);

        if(typeof this.innerHTML === 'function') {
            this.innerHTML = '(' + this.innerHTML.toString() + ')()';
        }

        return this.innerHTML;
    };

    // render the outer HTML for this element
    this.renderOuterHTML = function (html) {
        this.outerHTML = '';

        if (this.node.outerHTML) return this.node.outerHTML;

        this.outerHTML += '<' + this.tag;

        for (var k in this.attributes) {
            this.outerHTML += ' ';
            this.outerHTML += k + '="' + this.attributes[k] + '"';
        };

        this.outerHTML += '>';

        if (html) this.outerHTML += html;
        this.outerHTML += '</' + this.tag + '>';

        return this.outerHTML;
    };

    // render the DOM elements for this component
    this.renderDOM = function () {
        this.node = document.createElement(this.tag);

        for (var k in this.attributes) {
            this.node.setAttribute(k, this.attributes[k])
        };

        this.node.innerHTML = this.renderHTML();
        return this.node;
    };

    // render this component into a DOM target
    this.renderInto = function (target) {
        this.target = target;
        target.appendChild(this.renderDOM());
    };

    // render just the components
    this.renderComponents = function () {
        this.innerHTML = '';
        for (var i = 0, len = this.components.length; i < len; i++) {
            this.components[i].parent = this;
            this.components[i].render();
            if (this.components[i].node.outerHTML) {
                // the innerHTML for a node is generated by the template
                this.innerHTML += this.components[i].node.outerHTML;
            } else {
                // the node path, we need to render the outer HTML
                // our selves, we'll use the innerHTML generated from the template
                this.innerHTML += this.components[i].renderOuterHTML(this.components[i].innerHTML);
            }
        };
        return this.innerHTML;
    };

    // destroy references
    this.destroy = function () {
        var target = this.target || this.parent;
        if (target) target.removeChild(this.node);
        this.node = void(0);
        this.innerHTML = void(0);
        if (this.components) this.destroyComponents();
    };

    // destroy component references
    this.destroyComponents = function () {
        for (var i = 0, len = this.components.length; i < len; i++) {
            this.components[i].parent = void(0);
            this.components[i].destroy();
        };
    };

    // setup this components lazy style `mixin`
    this.data(data);
};
},{}],2:[function(require,module,exports){
'use strict';

module.exports = function() {};
},{}],3:[function(require,module,exports){
'use strict';

function router() {

    var routes = [];
    var unknown;

	/*
		@define: intializes the router class
		@requires: "func": {
			type: function,
			parameters: function(route),
			define: "this is used for when a hash is not found"
		}
		@example:
		var router = require('./router')
        router.intitialize(function(route) {
			console.log(route + 'not found');
		});
	*/
    var intitialize = function(func) {
        unknown = func;
        window.onhashchange = hashchange;
        hashchange();
    };

	/*
		@define: is called when a hash change occurs
		@requires: none
		@returns: none
	*/
    var hashchange = function() {
        var hash = window.location.hash.replace('#', '');
        if (routes[hash]) {
            routes[hash]();
        } else {
            unknown(hash);
        }
    };

	/*
		@define: binds hash events to global window.routes
		@requires: "hash": {type: String}
		@requires: "func": {type: Function}
		@example:
		var router = require('./router');
		router.bind('hello', function() {
			alert('hellow world');
		});
	*/
    var bind = function(hash, func) {
        if (typeof func === 'function') {
            routes[hash] = func;
        } else {
            throw new TypeError('func needs to be a function');
        }
    };

	/*
		@define: changes the hash of the window object
		@requires: "hash": {type: String}
		@example:
		var router = require('./router');
		router.change('hello');
	*/
    var change = function(hash) {
		/*
			This could happen if the user is already on a hash event
			and restarts the app
		 */
        if (location.href.substring(location.href.indexOf('#')) === '#' + hash) {
            hashchange();
        } else {
            location.href = '#' + hash;
        }
    };

    return {
        bind: bind,
        change: change,
        routes: routes,
        intitialize: intitialize
    };

}

var instance;
module.exports = instance = instance || router();

},{}],4:[function(require,module,exports){
'use strict';

var
    component = require('chemical/component');

var
    templates = require('../templates');

var
    controller = require('../controllers/todo');

module.exports = function (data) {
    data.allselected = data.allselected ? 'selected' : '';
    data.activeselected = data.allselected ? 'selected' : '';
    data.completedselected = data.allselected ? 'selected' : '';

    this.setActiveFilter = function (value) {
        var map = {
            active: 'activeselected',
            all: 'allselected',
            completed: 'completedselected'
        };

        if (map[value]) {
            this.allselected = '';
            this.activeselected = '';
            this.completedselected = '';
            this[map[value]] = 'selected';
            
            var filter = (value === 'completed') ? value : '';
            if(value === 'all') {
                controller.filter();
            } else {
                controller.filter({status: filter});
            }
        };
        
        
    };

    data.template = templates['templates/footer.html'];
    component.call(this, data);
};
},{"../controllers/todo":9,"../templates":12,"chemical/component":1}],5:[function(require,module,exports){
'use strict';

var
    component = require('chemical/component');

var
    templates = require('../templates');

module.exports = function(data) {
    data.template = templates['templates/header.html'];
    component.call(this, data);
};

},{"../templates":12,"chemical/component":1}],6:[function(require,module,exports){
'use strict';

var
    component = require('chemical/component');

var
    templates = require('../templates');

var
    todo = require('./todo');

module.exports = function(data) {
    this.todo = todo;
    data.template = templates['templates/main.html'];
    component.call(this, data);
};

},{"../templates":12,"./todo":7,"chemical/component":1}],7:[function(require,module,exports){
'use strict';

var
    component = require('chemical/component');

var
    templates = require('../templates');

module.exports = function(data) {
    data.template = templates['templates/todo.html']; 
    component.call(this, data);
};

},{"../templates":12,"chemical/component":1}],8:[function(require,module,exports){
module.exports = {
    ENTER_KEY: 13,
    ESCAPE_KEY: 27
};
},{}],9:[function(require,module,exports){
var noop = require('chemical/noop');
var constants = require('../constants');
var store = require('../stores/todo');
var transitionEnded = noop;

// event handling
document.addEventListener('transitionend', function() {
    transitionEnded();
    transitionEnded = noop;
});

document.addEventListener('click', function (event) {
    var target = event.target;

    // clear completed items
    if (target.id === 'clear-completed') {
        store.delete(store.find({
            status: 'completed'
        }));
        return;
    }

    if (target.id === 'toggle-all') {
        // get all todos from the store
        var todos = store.get();
        var status = target.checked ? 'completed' : '';
        
        // set view meta data we want before the store
        // notifies the view of updates to items
        store.viewstate.toggleall = target.checked ? 'checked' : '';

        // update all the todos to be completed
        for (var i = 0; i < todos.length; i++) {
            store.update(i, {
                status: status
            }, false)
        }

        return;
    }

    // if the toggle checked
    if (target.className.indexOf('destroy') > -1) {
        // update the store
        var li = target.parentNode.parentNode;
        store.delete(li.getAttribute('data-index'));
    }
    
    // if the toggle checked
    if (target.className.indexOf('toggle') > -1) {

        // update the store
        var li = target.parentNode.parentNode;
        var status = target.checked ? 'completed' : '';
        
        // set the class on the DOM for animated strike through
        li.className = status;
        transitionEnded = function(){
            // update the store with no redraw
            store.update(li.getAttribute('data-index'), {
                status: status
            }, true)
        }
    }
}, false);

window.addEventListener('keypress', function (event) {
    if (event.keyCode === constants.ENTER_KEY) {
        if ('new-todo' === event.target.id) {
            //new todo
            var todo = event.target.value;
            store.add({
                label: todo
            });
            
            event.target.value = '';
        }
        return;
    }

    // focus on the new-todo input box if someone is 
    // typing a todo
    document.getElementById('new-todo').focus();
}, false);

window.addEventListener('keyup', function (event) {
    if (event.keyCode === constants.ESCAPE_KEY) {

    }
}, false);


// exportable api
module.exports = {
    filter: function(query) {
        if(query) {
            store.filter(query);
            store.dispatch();
        } else {
            store.filter();
            store.dispatch();
        }
    }
};
},{"../constants":8,"../stores/todo":11,"chemical/noop":2}],10:[function(require,module,exports){
// import helpers
var router = require('chemical/router');

// render view
var MainView = require('./views/main');
var target = document.querySelector('#todoapp');

MainView.renderInto(target);

// application routes for todo
router.intitialize(function (route) {
    // 404
});

router.bind('/', function () {
    MainView.components.footer.setActiveFilter('all');
});

router.bind('/active', function () {
    MainView.components.footer.setActiveFilter('active');
});

router.bind('/completed', function () {
    MainView.components.footer.setActiveFilter('completed');
});


// controls first view
if (router.routes[location.pathname]) {
    router.routes[location.pathname]();
} else {
    var hash = location.hash.replace('#', '');
    router.change(hash);
}
},{"./views/main":13,"chemical/router":3}],11:[function(require,module,exports){
var todos = [];
var lastquery;
var filter = void(0);

module.exports = {
    viewstate: {},
    filter: function(query) {
        if(!query){
            filter = void(0);
            return;
        }
        
        filter = this.find(query);
        lastquery = query;
    },
    add: function (item) {
        item.status = '';
        todos.push(item);
        
        if(filter) {
            this.filter(lastquery);
        }
        
        this.dispatch();
    },
    get: function () {
        if(filter) {
            return filter;
        }
        return todos;
    },
    update: function (idx, props, nodraw) {
        for (var k in props) {
            todos[idx][k] = props[k];
        }
        this.dispatch(nodraw);
    },
    dispatch: function (nodraw) {
        var e = new Event('todo-store-updated');
        e.nodraw = nodraw;
        e.store = this;
        document.dispatchEvent(e);
    },
    delete: function (idx) {
        if (idx instanceof Array) {
            for (var i = idx.length - 1; i >= 0; i--) {
               todos.splice(idx[i].index, 1); 
            }
        } else {
            todos.splice(idx, 1);
        }
        var e = new Event('todo-store-updated');
        e.store = this;
        document.dispatchEvent(e);
    },
    find: function (query) {
        var results = [];
        for (var i = 0; i < todos.length; i++) {
            var todo = todos[i];
            var match = true;
            for (var k in query) {
                if(todo[k] !== query[k]) {
                    match = false;
                }
            }
            if(match) {
                todo.index = i;
                results.push(todo);
            }
        }
        return results;
    }
}
},{}],12:[function(require,module,exports){
this["JST"] = this["JST"] || {};

this["JST"]["templates/footer.html"] = function(data) {
var __t, __p = '', __e = _.escape;
__p += '<footer id="footer" class="footer">\n    <span id="todo-count" class="todo-count"><strong>' +
((__t = ( data.itemsleft )) == null ? '' : __t) +
'</strong> items left</span>\n    <ul id="filters" class="filters">\n        <li>\n            <a class="' +
((__t = ( data.allselected )) == null ? '' : __t) +
'" href="#/">All</a>\n        </li>\n        <li>\n            <a class="' +
((__t = ( data.activeselected )) == null ? '' : __t) +
'"  href="#/active">Active</a>\n        </li>\n        <li>\n            <a class="' +
((__t = ( data.completedselected )) == null ? '' : __t) +
'" href="#/completed">Completed</a>\n        </li>\n    </ul>\n    <button id="clear-completed" class="clear-completed">Clear completed</button>\n</footer>';
return __p
};

this["JST"]["templates/header.html"] = function(data) {
var __t, __p = '', __e = _.escape;
__p += '<header id="header" class="header">\n    <h1>todos</h1>\n    <input id="new-todo" class="new-todo" placeholder="What needs to be done?" autofocus>\n</header>';
return __p
};

this["JST"]["templates/main.html"] = function(data) {
var __t, __p = '', __e = _.escape, __j = Array.prototype.join;
function print() { __p += __j.call(arguments, '') }
__p += '<section id="main" class="main">\n    <input id="toggle-all" class="toggle-all" type="checkbox" ' +
((__t = ( data.toggleall )) == null ? '' : __t) +
'>\n    <label for="toggle-all">Mark all as complete</label>\n    <ul id="todo-list" class="todo-list">\n        ';
 if(data.content) { ;
__p += '\n            ';
 for(var i = 0; i < data.content.length; i++) { ;
__p += '\n                ';
 var todo = new this.todo({ index: i, content: data.content[i].label, status: data.content[i].status});  todo.setup();;
__p += '\n                ' +
((__t = ( todo.innerHTML )) == null ? '' : __t) +
'\n            ';
 } ;
__p += '\n        ';
 } ;
__p += '\n    </ul>\n</section>';
return __p
};

this["JST"]["templates/todo.html"] = function(data) {
var __t, __p = '', __e = _.escape;
__p += '<li class="' +
((__t = ( data.status )) == null ? '' : __t) +
'" data-index="' +
((__t = ( data.index )) == null ? '' : __t) +
'">\n    <div class="view">\n        <input type="checkbox" class="toggle" ' +
((__t = ( data.status === 'completed' ? 'checked' : '' )) == null ? '' : __t) +
'>\n        <label>' +
((__t = ( data.content )) == null ? '' : __t) +
'</label>\n        <button class="destroy"></button>\n    </div>\n</li>';
return __p
};

var _ = {escape: escape};

module.exports =this["JST"];
},{}],13:[function(require,module,exports){
//import components
var Component = require('chemical/component');

var Header = require('../components/header'),
    Main = require('../components/main'),
    Todo = require('../components/todo'),
    Footer = require('../components/footer');

var Controller = require('../controllers/todo');

// declare and name components for exporting
// chemical does NOT do this by default, YOU decide
// when you need this
var components = {
        header:  new Header({}),
        main: new Main({
            content: []
        }),
        footer: new Footer({
            itemsleft: 0
        })
    };

// compose view
var container = new Component({
    components: [
        components.header,
        components.main,
        components.footer
    ]
});

document.addEventListener('todo-store-updated', function(event){
    var store = event.store;
    var viewstate = store.viewstate;

    // find all todos where status is empty
    components.footer.itemsleft = store.find({status:''}).length;
    components.main.toggleall = viewstate.toggleall ? 'checked' : '';
    components.main.data({content: store.get()});
}, false);

//we want to export our components
module.exports = container;
},{"../components/footer":4,"../components/header":5,"../components/main":6,"../components/todo":7,"../controllers/todo":9,"chemical/component":1}]},{},[10]);
